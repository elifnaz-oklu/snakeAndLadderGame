{"ast":null,"code":"import { PLAYER_CREATE, PLAYER_DELETE, PLAYER_DELETE_ALL, PLAYER_UPDATE_NAME, PLAYER_UPDATE_POSITION, PLAYER_STATS_UPDATE } from '../Constants';\nimport Immutable from 'immutable';\nconst player_data = Immutable.Map({\n  all: Immutable.List([]),\n  count: 0,\n  stats: Immutable.List([])\n});\n\nfunction player() {\n  let data = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : player_data;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case PLAYER_CREATE:\n      let count = data.get('count') + 1;\n\n      if (action.payload && !action.payload.id) {\n        action.payload.id = count;\n        action.payload.name = `Anonymous#${count}`;\n      }\n\n      action.payload.array_index = data.get('all').size;\n      data = data.set('count', count);\n      return data.set('all', data.get('all').push(action.payload));\n\n    case PLAYER_UPDATE_POSITION:\n      let player_index = data.get('all').findIndex(item => {\n        return item.id == action.payload.id;\n      });\n      let updatePlayerPos = data.get('all').update(player_index, function (item) {\n        return Object.assign({}, item, {\n          tile: action.payload.tile,\n          index: action.payload.index\n        });\n      });\n      return data.set('all', updatePlayerPos);\n\n    case PLAYER_UPDATE_NAME:\n      let player_u_index = data.get('all').findIndex(item => {\n        return item.id == action.payload.id;\n      });\n      let updatePlayerName = data.get('all').update(player_u_index, function (item) {\n        return Object.assign({}, item, {\n          name: action.payload.name,\n          array_index: player_u_index\n        });\n      });\n      return data.set('all', updatePlayerName);\n\n    case PLAYER_DELETE:\n      let playerIndex = data.get('all').findIndex(item => {\n        return item.id == action.payload;\n      });\n      return data.set('all', data.get('all').delete(playerIndex));\n\n    case PLAYER_DELETE_ALL:\n      return data.set('all', Immutable.List([]));\n\n    case PLAYER_STATS_UPDATE:\n      let stats_index = data.get('stats').findIndex(item => {\n        return item.id == action.payload.id;\n      });\n\n      if (stats_index >= 0) {\n        let updatePlayerStat = data.get('stats').update(stats_index, function (stat) {\n          return Object.assign({}, stat, {\n            rolls: stat.rolls + action.payload.rolls,\n            sixes: stat.sixes + action.payload.sixes,\n            ladders: stat.ladders + action.payload.ladders,\n            snakes: stat.snakes + action.payload.snakes\n          });\n        });\n        return data.set('stats', updatePlayerStat);\n      } else {\n        return data.set('stats', data.get('stats').push(action.payload));\n      }\n\n    default:\n      return data;\n  }\n}\n\nexport default player;","map":{"version":3,"sources":["C:/Users/Mustafa Kemal AYAS/Desktop/untitled/frontend/src/redux/reducers/Player.js"],"names":["PLAYER_CREATE","PLAYER_DELETE","PLAYER_DELETE_ALL","PLAYER_UPDATE_NAME","PLAYER_UPDATE_POSITION","PLAYER_STATS_UPDATE","Immutable","player_data","Map","all","List","count","stats","player","data","action","type","get","payload","id","name","array_index","size","set","push","player_index","findIndex","item","updatePlayerPos","update","Object","assign","tile","index","player_u_index","updatePlayerName","playerIndex","delete","stats_index","updatePlayerStat","stat","rolls","sixes","ladders","snakes"],"mappings":"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","sourcesContent":["import {\r\n\tPLAYER_CREATE,\r\n\tPLAYER_DELETE,\r\n\tPLAYER_DELETE_ALL,\r\n\tPLAYER_UPDATE_NAME,\r\n\tPLAYER_UPDATE_POSITION,\r\n\tPLAYER_STATS_UPDATE,\r\n} from '../Constants';\r\nimport Immutable from 'immutable';\r\n\r\n\r\n\r\nconst player_data = Immutable.Map({\r\n\tall: Immutable.List([]),\r\n\tcount: 0,\r\n\tstats: Immutable.List([]),\r\n});\r\n\r\n\r\n\r\nfunction player( data = player_data, action ) {\r\n\r\n\tswitch (action.type) {\r\n\r\n\t\tcase PLAYER_CREATE:\r\n\t\t\tlet count = data.get('count') + 1;\r\n\t\t\tif( action.payload && ! action.payload.id ) {\r\n\t\t\t\taction.payload.id = count;\r\n\t\t\t\taction.payload.name = `Anonymous#${count}`;\r\n\t\t\t}\r\n\t\t\taction.payload.array_index = data.get('all').size;\r\n\t\t\tdata = data.set( 'count', count );\r\n\t\t\treturn data.set( 'all', data.get('all').push( action.payload ) );\r\n\r\n\r\n\t\tcase PLAYER_UPDATE_POSITION:\r\n\t\t\tlet player_index = data.get('all').findIndex( item => { return item.id == action.payload.id; });\r\n\t\t\tlet updatePlayerPos = data.get('all').update(player_index, function( item ) {\r\n\t\t\t\treturn Object.assign( {}, item, { tile: action.payload.tile, index: action.payload.index } );\r\n\t\t\t});\r\n\t\t\treturn data.set( 'all', updatePlayerPos );\r\n\r\n\r\n\t\tcase PLAYER_UPDATE_NAME:\r\n\t\t\tlet player_u_index = data.get('all').findIndex( item => { return item.id == action.payload.id; });\r\n\t\t\tlet updatePlayerName = data.get('all').update(player_u_index, function( item ) {\r\n\t\t\t\treturn Object.assign( {}, item, { name: action.payload.name, array_index: player_u_index } );\r\n\t\t\t});\r\n\t\t\treturn data.set( 'all', updatePlayerName );\r\n\r\n\r\n\t\tcase PLAYER_DELETE:\r\n\t\t\tlet playerIndex = data.get('all').findIndex( item => { return item.id == action.payload; });\r\n\t\t\treturn data.set('all', data.get('all').delete(playerIndex));\r\n\r\n\r\n\t\tcase PLAYER_DELETE_ALL:\r\n\t\t\treturn data.set('all', Immutable.List([]) );\r\n\r\n\r\n\t\tcase PLAYER_STATS_UPDATE:\r\n\t\t\tlet stats_index = data.get('stats').findIndex( item => { return item.id == action.payload.id; });\r\n\t\t\tif( stats_index >= 0 ) {\r\n\t\t\t\tlet updatePlayerStat = data.get('stats').update(stats_index, function( stat ) {\r\n\t\t\t\t\treturn Object.assign( {}, stat, {\r\n\t\t\t\t\t\trolls: stat.rolls + action.payload.rolls,\r\n\t\t\t\t\t\tsixes: stat.sixes + action.payload.sixes,\r\n\t\t\t\t\t\tladders: stat.ladders + action.payload.ladders,\r\n\t\t\t\t\t\tsnakes: stat.snakes + action.payload.snakes,\r\n\t\t\t\t\t});\r\n\t\t\t\t});\r\n\t\t\t\treturn data.set( 'stats', updatePlayerStat );\r\n\t\t\t} else {\r\n\t\t\t\treturn data.set( 'stats', data.get('stats').push( action.payload ) );\r\n\t\t\t}\r\n\r\n\r\n\t\tdefault:\r\n\t\t\treturn data;\r\n\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n\r\nexport default player;\r\n\r\n"]},"metadata":{},"sourceType":"module"}