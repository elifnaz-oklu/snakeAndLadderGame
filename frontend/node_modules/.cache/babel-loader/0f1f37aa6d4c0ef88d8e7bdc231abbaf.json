{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Mustafa Kemal AYAS\\\\Desktop\\\\untitled\\\\frontend\\\\src\\\\ui\\\\game\\\\Stats.js\";\nimport React from 'react';\nimport { Link, browserHistory } from 'react-router';\nimport { connect } from 'react-redux';\nimport Card from 'app/components/stats/Card';\nimport Sortable from 'react-sortablejs'; // same func used in Sidebar, if you plan on keeping this func here, place it in a hepler file or delete after testing.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet findPlayerByIndex = (state, index) => {\n  if (!Number.isInteger(index)) {\n    return {\n      name: 'Undefined'\n    };\n  }\n\n  let players = state.player.get('all').toArray();\n  return players[index];\n};\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    players: state.player.get('all'),\n    stats: state.player.get('stats'),\n    winning_player: findPlayerByIndex(state, state.game.get('config').get('winner'))\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  gameSetStart: () => dispatch(Action.gameSetStart())\n});\n\nlet Stats = props => {\n  let findStatByPlayerId = id => {\n    return props.stats.find(function (obj) {\n      return obj.id == id;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"screen\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Game Stats\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 4\n    }, this), props.players.size > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-container\",\n      children: /*#__PURE__*/_jsxDEV(Sortable, {\n        children: props.players.map(player => {\n          let stat = findStatByPlayerId(player.id);\n          return /*#__PURE__*/_jsxDEV(Card, {\n            player: player,\n            stat: stat,\n            winner: props.winning_player\n          }, 'card_' + player.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 9\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 3\n  }, this);\n};\n\n_c = Stats;\nconst ConnectStats = connect(mapStateToProps, mapDispatchToProps)(Stats);\nexport default ConnectStats;\n\nvar _c;\n\n$RefreshReg$(_c, \"Stats\");","map":{"version":3,"sources":["C:/Users/Mustafa Kemal AYAS/Desktop/untitled/frontend/src/ui/game/Stats.js"],"names":["React","Link","browserHistory","connect","Card","Sortable","findPlayerByIndex","state","index","Number","isInteger","name","players","player","get","toArray","mapStateToProps","ownProps","stats","winning_player","game","mapDispatchToProps","dispatch","gameSetStart","Action","Stats","props","findStatByPlayerId","id","find","obj","size","map","stat","ConnectStats"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,IAAT,EAAeC,cAAf,QAAqC,cAArC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,IAAP,MAAiB,2BAAjB;AACA,OAAOC,QAAP,MAAqB,kBAArB,C,CAGA;;;;AACA,IAAIC,iBAAiB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzC,MAAI,CAAEC,MAAM,CAACC,SAAP,CAAkBF,KAAlB,CAAN,EAAkC;AACjC,WAAO;AAAEG,MAAAA,IAAI,EAAE;AAAR,KAAP;AACA;;AACD,MAAIC,OAAO,GAAGL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,KAAjB,EAAwBC,OAAxB,EAAd;AACA,SAAOH,OAAO,CAACJ,KAAD,CAAd;AACA,CAND;;AASA,MAAMQ,eAAe,GAAG,CAAET,KAAF,EAASU,QAAT,KAAuB;AAC9C,SAAO;AACNL,IAAAA,OAAO,EAAEL,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,KAAjB,CADH;AAENI,IAAAA,KAAK,EAAEX,KAAK,CAACM,MAAN,CAAaC,GAAb,CAAiB,OAAjB,CAFD;AAGNK,IAAAA,cAAc,EAAEb,iBAAiB,CAAEC,KAAF,EAASA,KAAK,CAACa,IAAN,CAAWN,GAAX,CAAe,QAAf,EAAyBA,GAAzB,CAA6B,QAA7B,CAAT;AAH3B,GAAP;AAKA,CAND;;AAQA,MAAMO,kBAAkB,GAAGC,QAAQ,KAAK;AACvCC,EAAAA,YAAY,EAAE,MAAMD,QAAQ,CAAEE,MAAM,CAACD,YAAP,EAAF;AADW,CAAL,CAAnC;;AAMA,IAAIE,KAAK,GAAKC,KAAF,IAAa;AAExB,MAAIC,kBAAkB,GAAIC,EAAD,IAAQ;AAChC,WAAOF,KAAK,CAACR,KAAN,CAAYW,IAAZ,CAAiB,UAASC,GAAT,EAAc;AAAE,aAAOA,GAAG,CAACF,EAAJ,IAAUA,EAAjB;AAAsB,KAAvD,CAAP;AACA,GAFD;;AAKA,sBACC;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA,4BACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADD,EAGGF,KAAK,CAACd,OAAN,CAAcmB,IAAd,GAAqB,CAArB,iBACD;AAAK,MAAA,SAAS,EAAC,gBAAf;AAAA,6BACC,QAAC,QAAD;AAAA,kBACEL,KAAK,CAACd,OAAN,CAAcoB,GAAd,CAAmBnB,MAAM,IAAI;AAC7B,cAAIoB,IAAI,GAAGN,kBAAkB,CAAEd,MAAM,CAACe,EAAT,CAA7B;AACA,8BACC,QAAC,IAAD;AAAkC,YAAA,MAAM,EAAEf,MAA1C;AAAkD,YAAA,IAAI,EAAGoB,IAAzD;AAAgE,YAAA,MAAM,EAAEP,KAAK,CAACP;AAA9E,aAAY,UAAUN,MAAM,CAACe,EAA7B;AAAA;AAAA;AAAA;AAAA,kBADD;AAGA,SALA;AADF;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAqBA,CA5BD;;KAAIH,K;AAgCJ,MAAMS,YAAY,GAAG/B,OAAO,CAC3Ba,eAD2B,EAE3BK,kBAF2B,CAAP,CAGnBI,KAHmB,CAArB;AAMA,eAAeS,YAAf","sourcesContent":["import React from 'react';\r\nimport { Link, browserHistory } from 'react-router';\r\nimport { connect } from 'react-redux';\r\nimport Card from 'app/components/stats/Card';\r\nimport Sortable from 'react-sortablejs';\r\n\r\n\r\n// same func used in Sidebar, if you plan on keeping this func here, place it in a hepler file or delete after testing.\r\nlet findPlayerByIndex = (state, index) => {\r\n\tif( ! Number.isInteger( index ) ) {\r\n\t\treturn { name: 'Undefined' };\r\n\t}\r\n\tlet players = state.player.get('all').toArray();\r\n\treturn players[index];\r\n}\r\n\r\n\r\nconst mapStateToProps = ( state, ownProps ) => {\r\n\treturn {\r\n\t\tplayers: state.player.get('all'),\r\n\t\tstats: state.player.get('stats'),\r\n\t\twinning_player: findPlayerByIndex( state, state.game.get('config').get('winner') ),\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n\tgameSetStart: () => dispatch( Action.gameSetStart() ),\r\n});\r\n\r\n\r\n\r\nlet Stats = ( props ) => {\r\n\r\n\tlet findStatByPlayerId = (id) => {\r\n\t\treturn props.stats.find(function(obj) { return obj.id == id; });\r\n\t}\r\n\r\n\r\n\treturn (\r\n\t\t<div className=\"screen\">\r\n\t\t\t<h2>Game Stats</h2>\r\n\r\n\t\t\t{ props.players.size > 0 &&\r\n\t\t\t\t<div className=\"card-container\">\r\n\t\t\t\t\t<Sortable>\r\n\t\t\t\t\t{ props.players.map( player => {\r\n\t\t\t\t\t\t\tlet stat = findStatByPlayerId( player.id );\r\n\t\t\t\t\t\t\treturn(\r\n\t\t\t\t\t\t\t\t<Card key={ 'card_' + player.id } player={player} stat={ stat } winner={props.winning_player} />\r\n\t\t\t\t\t\t\t)\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t}\r\n\t\t\t\t\t</Sortable>\r\n\t\t\t\t</div>\r\n\t\t\t}\r\n\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\n\r\n\r\nconst ConnectStats = connect(\r\n\tmapStateToProps,\r\n\tmapDispatchToProps\r\n)(Stats)\r\n\r\n\r\nexport default ConnectStats;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}